/**
 * 设置该项目及其子项目
 *
 * 项目自身需要使用的资源
 */
allprojects {

    group = "com.github.tiger.ai"

    apply plugin: 'idea'
    apply plugin: "maven"
    apply plugin: "jacoco"
//    apply plugin: 'checkstyle'
//    apply plugin: 'findbugs'
//    apply plugin: 'pmd'

    repositories {
        mavenLocal() // USER_HOME/.m2/repository
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        mavenCentral() // https://repo.maven.apache.org/maven2/
    }

    System.properties["file.encoding"] = "UTF-8"

}

/**
 * 设置该项目的子项目
 */
subprojects {

    apply plugin: "java"

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        options.encoding = "UTF-8"

        /**
         * 关闭编译警告
         */

        /**
         * Try to turn them all off automatically
         */
        options.compilerArgs << '-Xlint:none'

        /**
         * same as '-Xlint:none'
         */
        options.compilerArgs << '-nowarn'

        /**
         * Turn them off manually
         */
        options.compilerArgs << '-Xlint:-auxiliaryclass'
        options.compilerArgs << '-Xlint:-cast'
        options.compilerArgs << '-Xlint:-classfile'
        options.compilerArgs << '-Xlint:-deprecation'
        options.compilerArgs << '-Xlint:-dep-ann'
        options.compilerArgs << '-Xlint:-divzero'
        options.compilerArgs << '-Xlint:-empty'
        options.compilerArgs << '-Xlint:-fallthrough'
        options.compilerArgs << '-Xlint:-finally'
        options.compilerArgs << '-Xlint:-options'
        options.compilerArgs << '-Xlint:-overloads'
        options.compilerArgs << '-Xlint:-overrides'
        options.compilerArgs << '-Xlint:-path'
        options.compilerArgs << '-Xlint:-processing'
        options.compilerArgs << '-Xlint:-rawtypes'
        options.compilerArgs << '-Xlint:-serial'
        options.compilerArgs << '-Xlint:-static'
        options.compilerArgs << '-Xlint:-try'
        options.compilerArgs << '-Xlint:-unchecked'
        options.compilerArgs << '-Xlint:-varargs'
    }

    /**
     * 发布配置
     */
    apply plugin: 'maven-publish'

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    publishing {
        publications {
            push(MavenPublication) {
                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url = "http://172.17.0.59:8081/nexus/content/repositories/snapshots"
                } else {
                    url = "http://172.17.0.59:8081/nexus/content/repositories/releases"
                }

                credentials {
                    username 'admin'
                    password 'admin123'
                }
            }
        }
    }

    ext {
        // profiles

        if (project.hasProperty('profile')) {
            profile = project['profile']
        } else {
            profile = "dev"
        }
        println "[profile]:" + profile

        // dependencies

        /**
         * junit
         */
        junitVersion = "4.12"
        /**
         * testng
         */
        testngVersion = "6.10"
        /**
         * logging
         */
        log4jVersion = '1.2.17'
        slf4jVersion = '1.7.25'
        log4j2Version = '2.8.1'
        gelfVersion = '1.11.0'
        /**
         * apache
         */
        commonscliVersion = "1.4"
        commonslang3Version = "3.7"
        beanutilsVersion = "1.9.3"
        httpclientVersion = "4.5.4"
        zookeeperVersion = "3.4.10"
        curatorVersion = "2.12.0"
        poiVersion = "3.17"
        /**
         * spring
         */
        springVersion = "4.2.5.RELEASE"
        /**
         * google
         */
        guavaVersion = "20.0"
        gsonVersion = "2.8.2"
    }

    sourceSets {
        main {
            resources {
                srcDir "src/main/profiles/${profile}"
            }
        }
    }

    jar {
        manifest {
            attributes "Package": "com.github.tiger.recommend",
                    "Built-Date": new Date().getDateTimeString(),
                    "Built-With": "gradle-${project.getGradle().getGradleVersion()}, " +
                            "groovy-${GroovySystem.getVersion()}",
                    "Created-By": "Java " + System.getProperty("java.version") +
                            " (" + System.getProperty("java.vendor") + ")"
        }
    }

    dependencies {
        /**
         * junit
         */
        testCompile "junit:junit:$junitVersion"
        /**
         * testng
         */
        testCompile "org.testng:testng:$testngVersion"

        /**
         * logging
         */
        compile(
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.slf4j:jcl-over-slf4j:$slf4jVersion",
                "org.apache.logging.log4j:log4j-core:$log4j2Version",
                "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version",
                "biz.paluch.logging:logstash-gelf:$gelfVersion"
        )
        /**
         * apache
         */
        compile("commons-cli:commons-cli:$commonscliVersion")
        compile("org.apache.commons:commons-lang3:$commonslang3Version")
        compile("commons-beanutils:commons-beanutils:$beanutilsVersion") {
            exclude group: "commons-logging"
        }
        compile("org.apache.httpcomponents:httpclient:$httpclientVersion") {
            exclude group: "commons-logging"
        }
        compile("org.apache.curator:curator-recipes:$curatorVersion") {
            exclude group: "log4j"
            exclude group: "org.slf4j"
            exclude(group: "org.apache.zookeeper")
        }
        compile("org.apache.zookeeper:zookeeper:$zookeeperVersion") {
            exclude group: "log4j"
            exclude group: "org.slf4j"
        }
        /**
         * spring
         */
        compile("org.springframework:spring-beans:$springVersion") {
            exclude group: "commons-logging"
        }
        /**
         * google
         */
        compile(
                "com.google.guava:guava:$guavaVersion",
                "com.google.code.gson:gson:$gsonVersion"
        )
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
            csv.enabled false
        }
        sourceSets sourceSets.main
    }

//    checkstyle {
//        ignoreFailures = true
//        sourceSets = [sourceSets.main]
//    }

//    findbugs {
//        ignoreFailures = true
//        sourceSets = [sourceSets.main]
//    }
//
//    pmd {
//        ruleSets = ["basic", "braces", "design"]
//        ignoreFailures = true
//        sourceSets = [sourceSets.main]
//    }


    test {
        useTestNG()

        exclude("**/tiger/**/test/**")

        jacoco {
            excludes = ["**/tiger/**/test/**"]
        }
    }

    /**
     * 生成target
     */
    task mkDirs {
        doLast {
            file('build/target/bin').mkdirs()
            file('build/target/classes').mkdirs()
            file('build/target/jars').mkdirs()
        }
    }

    /**
     * 导出jar
     */
    task copyLibs(type: Copy) {
        from 'build/libs'
        into 'build/target'
    }

    /**
     * 导出classes
     */
    task copyClasses(type: Copy) {
        from sourceSets.main.output.classesDirs
        into 'build/target/classes'
    }

    /**
     * 导出配置文件
     */
    task copyConf(type: Copy) {
        from sourceSets.main.output.resourcesDir
        into 'build/target/classes'
    }

    /**
     * 导出依赖包
     */
    task copyJars(type: Copy) {
        from configurations.runtime
        into 'build/target/jars'
    }

    /**
     * 装备
     */
    task prepare {
        dependsOn 'mkDirs'
        dependsOn 'copyClasses', 'copyConf', 'copyJars'
    }

    /**
     * 构建
     */
    task whole(dependsOn: ['build', 'prepare'])

    /**
     * 发布
     */
    task release(dependsOn: ['clean', 'whole'])

    /**
     * 打tar包
     */
    task buildTar(type: Tar, dependsOn: ['release']) {
        from 'build/target'
        compression = Compression.GZIP
        extension = 'tar.gz'
        destinationDir = file('build')
    }
}

defaultTasks 'clean', 'jar'
